"""
Django settings for meal_mate project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env files explicitly
# 1) Try <BASE_DIR>/.env (project folder with manage.py)
# 2) Try <BASE_DIR>.parent/.env (workspace root)
_dotenv_loaded = False
try:
    _dotenv_loaded = load_dotenv(dotenv_path=str((Path(__file__).resolve().parent / '.env')))
except Exception:
    pass
if not _dotenv_loaded:
    try:
        load_dotenv(dotenv_path=str((Path(__file__).resolve().parent.parent / '.env')))
    except Exception:
        pass




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-y3@vqwajnq^%4$(z-(*u3_s*@p5!t@_1tsiulw2@zev%f$r6%k')

# SECURITY WARNING: don't run with debug turned on in production!
# Default to True for local development; on Render we set DEBUG=False via env
DEBUG = os.getenv('DEBUG', 'True').lower() in ['1', 'true', 'yes']

# Allow Railway and local development
_default_allowed_hosts = ['localhost', '127.0.0.1', 'web-production-2cb0f.up.railway.app']
_railway_hostname = os.getenv('RAILWAY_PUBLIC_DOMAIN')
if _railway_hostname:
    _default_allowed_hosts.append(_railway_hostname)
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', ','.join(_default_allowed_hosts)).split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'delivery',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meal_mate.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meal_mate.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration for Railway
if os.getenv('DATABASE_URL'):
    # Production database (Railway PostgreSQL)
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(os.getenv('DATABASE_URL'))
    }
else:
    # Development database (SQLite)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Use WhiteNoise for efficient static file serving in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Running behind Render's proxy (X-Forwarded-Proto)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# CSRF trusted origins for Render URL(s) and optional custom domains
_render_external_hostname = os.getenv('RENDER_EXTERNAL_HOSTNAME')
CSRF_TRUSTED_ORIGINS = []
if _render_external_hostname:
    CSRF_TRUSTED_ORIGINS.append(f"https://{_render_external_hostname}")
_extra_csrf = os.getenv('CSRF_TRUSTED_ORIGINS')
if _extra_csrf:
    CSRF_TRUSTED_ORIGINS.extend([origin.strip() for origin in _extra_csrf.split(',') if origin.strip()])

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Razorpay credentials (read from env/.env; fallback to test keys for local dev)
RAZORPAY_KEY_ID = os.getenv('RAZORPAY_KEY_ID', 'rzp_test_RPN0XuRivI8r2O')
RAZORPAY_KEY_SECRET = os.getenv('RAZORPAY_KEY_SECRET', '2pIbULmde1MrknFdPRfx1jKi')
